

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @db.Uuid
  email         String   @unique
  name          String?
  avatarUrl     String?  @map("avatar_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  conversations Conversation[]
  oauthTokens   UserOAuthToken[]

  @@map("users")
}

model UserOAuthToken {
  id                String   @id @default(cuid())
  userId            String   @map("user_id") @db.Uuid
  provider          String   // 'google', 'github', etc.
  providerToken     String   @map("provider_token") // Access token
  providerRefreshToken String? @map("provider_refresh_token") // Refresh token
  tokenExpiresAt    DateTime? @map("token_expires_at") // When access token expires
  scopes            String[] // Granted scopes
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("user_oauth_tokens")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  role           String
  content        String
  createdAt      DateTime     @default(now()) @map("created_at")
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}
